{"version":3,"sources":["assets/img/icon.svg","components/common/NavigationBar/index.js","components/common/Footer/index.js","components/navigator/routes/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationBar","className","src","tomatoIcon","width","alt","Footer","href","target","rel","title","DashboardView","lazy","Routes","basename","process","fallback","name","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,8LCqB5BC,EAlBO,WACpB,OACE,gCACE,yBAAKC,UAAU,2EACb,yBAAKA,UAAU,wCACb,yBACEA,UAAU,4BACVC,IAAKC,IACLC,MAAM,KACNC,IAAI,gBAEN,0BAAMJ,UAAU,oCAAhB,cCwBKK,EApCA,WACb,OACE,4BAAQL,UAAU,6CAChB,uBAAGA,UAAU,6BACV,wBACD,uBACEA,UAAU,sBACVM,KAAK,gCACLC,OAAO,SACPC,IAAI,uBAJN,iBASF,yBAAKR,UAAU,4BACZ,iBACD,uBACEA,UAAU,sBACVM,KAAK,2CACLG,MAAM,WAHR,WAOC,SACD,uBACET,UAAU,sBACVM,KAAK,4BACLG,MAAM,YAHR,uBCpBFC,EAAgBC,gBAAK,kBAAM,gCAyBlBC,EAvBA,kBACb,kBAAC,IAAD,CAAQC,SAAUC,WAChB,yBAAKd,UAAU,8BACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,aACd,kBAAC,WAAD,CACEe,SACE,yBAAKf,UAAU,eACb,kBAAC,IAAD,CAASgB,KAAK,gCAGlBhB,UAAU,8BAEV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAWT,OAIvC,kBAAC,EAAD,SCfSU,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7e6c1d68.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.4d63d340.svg\";","import React from 'react'\nimport tomatoIcon from 'assets/img/icon.svg'\n\nconst NavigationBar = () => {\n  return (\n    <header>\n      <nav className=\"flex items-center justify-between flex-wrap bg-transparent p-6 border-b\">\n        <div className=\"flex items-center flex-shrink-0 mr-6\">\n          <img\n            className=\"fill-current h-8 w-8 mr-3\"\n            src={tomatoIcon}\n            width=\"54\"\n            alt=\"Tomato Icon\"\n          />\n          <span className=\"font-bold text-xl tracking-tight\">Tomato</span>\n        </div>\n      </nav>\n    </header>\n  )\n}\n\nexport default NavigationBar\n","import React from 'react'\n\nconst Footer = () => {\n  return (\n    <footer className=\"w-full py-4 bg-white border-t bottom-auto\">\n      <p className=\"text-center font-semibold\">\n        {'Created with Love by '}\n        <a\n          className=\"hover:text-blue-600\"\n          href=\"http://github.com/seagalputra\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          @seagalputra\n        </a>\n      </p>\n      <div className=\"text-center text-xs mt-2\">\n        {'Icons made by '}\n        <a\n          className=\"hover:text-blue-600\"\n          href=\"https://www.flaticon.com/authors/freepik\"\n          title=\"Freepik\"\n        >\n          Freepik\n        </a>\n        {' from '}\n        <a\n          className=\"hover:text-blue-600\"\n          href=\"https://www.flaticon.com/\"\n          title=\"Flaticon\"\n        >\n          www.flaticon.com\n        </a>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React, { Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Spinner from 'react-spinkit'\nimport NavigationBar from 'components/common/NavigationBar'\nimport Footer from 'components/common/Footer'\n\nconst DashboardView = lazy(() => import('../../../views/DashboardView'))\n\nconst Routes = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div className=\"flex flex-col min-h-screen\">\n      <NavigationBar />\n      <main className=\"flex-grow\">\n        <Suspense\n          fallback={\n            <div className=\"text-center\">\n              <Spinner name=\"line-scale-pulse-out-rapid\" />\n            </div>\n          }\n          className=\"flex flex-col min-h-screen\"\n        >\n          <Switch>\n            <Route exact path=\"/\" component={DashboardView} />\n          </Switch>\n        </Suspense>\n      </main>\n      <Footer />\n    </div>\n  </Router>\n)\n\nexport default Routes\n","import React from 'react'\nimport Routes from 'components/navigator/routes'\n\nfunction App() {\n  return (\n    <>\n      <Routes />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'assets/styles/index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}